顶点着色器（vertex shader）：
    输入：单个顶点
    功能：坐标变换
    输出：单个顶点

图元装配阶段（primary assemble）：
    输入：顶点着色器全部输出
    功能：把所有的点装配成指定图元的形状
    输出：图元

几何着色器（Geometry Shader）：
    输入：单个图元
    功能：图元 -> 几何形状
    输出：几何形状

光栅化阶段（Rasterization stage）：
    输入：几何形状
    功能：这里它会把图元映射为最终屏幕上相应的像素
    输出：生成供片段着色器(Fragment Shader)使用的片段(Fragment)

裁剪（Clipping）：
    裁切会丢弃超出你的视图以外的所有像素，用来提升执行效率。

片段着色器（Fragment Shader）：
    片段着色器的主要目的是计算一个像素的最终颜色，这也是所有OpenGL高级效果产生的地方。通常，片段着色器包含3D场景的数据（比如光照、阴影、光的颜色等等），这些数据可以被用来计算最终像素的颜色。

Alpha测试和混合(Blending)阶段：
    功能：深度测试（depth test，遮挡查询）、检查alpha值（alpha值定义了一个物体的透明度）并对物体进行混合(Blend)

可以看到，图形渲染管线非常复杂，它包含很多可配置的部分。然而，对于大多数场合，我们只需要配置顶点和片段着色器就行了。几何着色器是可选的，通常使用它默认的着色器就行了。